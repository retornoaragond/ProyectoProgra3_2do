/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemaactivos.presentation.categorias.edicion;

import java.util.Arrays;
import java.util.Observable;
import javax.swing.JOptionPane;
import sistemaactivos.SistemaActivos;
import sistemaactivos.logic.Categoria;

/**
 *
 * @author CarlosAndr√©s
 */
public class ViewCategoriaEdicion extends javax.swing.JDialog implements java.util.Observer {
    ControllerCategoriaEdicion controller;
    ModelCategoriaEdicion model;

    /**
     * Creates new form ViewCategoriaEdicion
     */
    public ViewCategoriaEdicion() {
        initComponents();
    }

        public ViewCategoriaEdicion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    
             public void setController(
             sistemaactivos.presentation.categorias.edicion.ControllerCategoriaEdicion controller) {
         this.controller = controller;
     }

     public ControllerCategoriaEdicion getController() {
         return controller;
     }

     public void setModel(sistemaactivos.presentation.categorias.edicion.ModelCategoriaEdicion model) {
         this.model = model;
         model.addObserver(this);
     }

     public ModelCategoriaEdicion getModel() {
         return model;
     }

        Categoria toCategoria() {
         Categoria result = new Categoria();
         result.setId(this.codigojTextField.getText());
         result.setDescripcion(this.descripcionjTextField.getText());
         return result;
     }

        
        
        
        
        
        
        
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CodigojLabel = new javax.swing.JLabel();
        DescripcionjLabel = new javax.swing.JLabel();
        codigojTextField = new javax.swing.JTextField();
        descripcionjTextField = new javax.swing.JTextField();
        agregarjButton = new javax.swing.JButton();
        salirjButton = new javax.swing.JButton();

        CodigojLabel.setText("Codigo");

        DescripcionjLabel.setText("Descripcion");

        agregarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sistemaactivos/presentation/icons/iconguardar.png"))); // NOI18N
        agregarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarjButtonActionPerformed(evt);
            }
        });

        salirjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sistemaactivos/presentation/icons/iconsalir.png"))); // NOI18N
        salirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DescripcionjLabel)
                    .addComponent(CodigojLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(codigojTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(descripcionjTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(agregarjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(salirjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CodigojLabel)
                    .addComponent(codigojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DescripcionjLabel)
                    .addComponent(descripcionjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(agregarjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salirjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarjButtonActionPerformed
        if (this.validar()) {
            try {
                this.controller.guardar(this.toCategoria());
                JOptionPane.showMessageDialog(this, "Datos registrados", "OK", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error en datos", "ERROR", JOptionPane.ERROR_MESSAGE);
        } // TODO add your handling code here:
    }//GEN-LAST:event_agregarjButtonActionPerformed

    private void salirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirjButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_salirjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CodigojLabel;
    private javax.swing.JLabel DescripcionjLabel;
    private javax.swing.JButton agregarjButton;
    private javax.swing.JTextField codigojTextField;
    private javax.swing.JTextField descripcionjTextField;
    private javax.swing.JButton salirjButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        this.limpiarErrores();
         Categoria actual = model.getCurrent();
         this.fromCategoria(actual);
     }

     
      boolean validar() {
         boolean error = false;

         this.CodigojLabel.setForeground(SistemaActivos.COLOR_OK);
         if (this.codigojTextField.getText().isEmpty()) {
             this.CodigojLabel.setForeground(SistemaActivos.COLOR_ERROR);
             error = true;
         }

         this.DescripcionjLabel.setForeground(SistemaActivos.COLOR_OK);
         if (this.descripcionjTextField.getText().isEmpty()) {
             this.descripcionjTextField.setForeground(SistemaActivos.COLOR_ERROR);
             error = true;
         }

         return !error;
     }

    
    
    
    public void fromCategoria(Categoria actual) {
         Boolean editable = Arrays.asList(SistemaActivos.MODO_AGREGAR, SistemaActivos.MODO_EDITAR).contains(model.getModo());
         this.codigojTextField.setEnabled(model.getModo() == SistemaActivos.MODO_AGREGAR);
         this.codigojTextField.setText(String.valueOf(actual.getId()));
         this.descripcionjTextField.setEnabled(editable);
         this.descripcionjTextField.setText(actual.getDescripcion());
         agregarjButton.setVisible(editable);
         this.validate();
     }

public void limpiarErrores() {
        this.CodigojLabel.setForeground(SistemaActivos.COLOR_OK);
         this.DescripcionjLabel.setForeground(SistemaActivos.COLOR_OK);
     }











}
